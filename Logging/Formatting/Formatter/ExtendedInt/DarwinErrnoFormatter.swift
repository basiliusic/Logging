//
//  DarwinErrnoFormatter.swift
//  Logger
//
//  Created by basilic on 02.11.2021.
//

struct DarwingErrnoFormatter<T: FixedWidthInteger>: Formatter {
  
  // MARK: - Types
  
  typealias ErrNo = Int8
  
  // MARK: - Properties
  
  var integer: T
  
  let keys: [ErrNo: String] = [
    0:   "",
    1:   "EPERM",
    2:   "ENOENT",
    3:   "ESRCH",
    4:   "EINTR",
    5:   "EIO",
    6:   "ENXIO",
    7:   "E2BIG",
    8:   "ENOEXEC",
    9:   "EBADF",
    10:  "ECHILD",
    11:  "EDEADLK",
    12:  "ENOMEM",
    13:  "EACCES",
    14:  "EFAULT",
    15:  "ENOTBLK",
    16:  "EBUSY",
    17:  "EEXIST",
    18:  "EXDEV",
    19:  "ENODEV",
    20:  "ENOTDIR",
    21:  "EISDIR",
    22:  "EINVAL",
    23:  "ENFILE",
    24:  "EMFILE",
    25:  "ENOTTY",
    26:  "ETXTBSY",
    27:  "EFBIG",
    28:  "ENOSPC",
    29:  "ESPIPE",
    30:  "EROFS",
    31:  "EMLINK",
    32:  "EPIPE",
    33:  "EDOM",
    34:  "ERANGE",
    35:  "EAGAIN",
    36:  "EINPROGRESS",
    37:  "EALREADY",
    38:  "ENOTSOCK",
    39:  "EDESTADDRREQ",
    40:  "EMSGSIZE",
    41:  "EPROTOTYPE",
    42:  "ENOPROTOOPT",
    43:  "EPROTONOSUPPORT",
    44:  "ESOCKTNOSUPPORT",
    45:  "ENOTSUP",
    46:  "EPFNOSUPPORT",
    47:  "EAFNOSUPPORT",
    48:  "EADDRINUSE",
    49:  "EADDRNOTAVAIL",
    50:  "ENETDOWN",
    51:  "ENETUNREACH",
    52:  "ENETRESET",
    53:  "ECONNABORTED",
    54:  "ECONNRESET",
    55:  "ENOBUFS",
    56:  "EISCONN",
    57:  "ENOTCONN",
    58:  "ESHUTDOWN",
    60:  "ETIMEDOUT",
    61:  "ECONNREFUSED",
    62:  "ELOOP",
    63:  "ENAMETOOLONG",
    64:  "EHOSTDOWN",
    65:  "EHOSTUNREACH",
    66:  "ENOTEMPTY",
    67:  "EPROCLIM",
    68:  "EUSERS",
    69:  "EDQUOT",
    70:  "ESTALE",
    72:  "EBADRPC",
    73:  "ERPCMISMATCH",
    74:  "EPROGUNAVAIL",
    75:  "EPROGMISMATCH",
    76:  "EPROCUNAVAIL",
    77:  "ENOLCK",
    78:  "ENOSYS",
    79:  "EFTYPE",
    80:  "EAUTH",
    81:  "ENEEDAUTH",
    82:  "EPWROFF",
    83:  "EDEVERR",
    84:  "EOVERFLOW",
    85:  "EBADEXEC",
    86:  "EBADARCH",
    87:  "ESHLIBVERS",
    88:  "EBADMACHO",
    89:  "ECANCELED",
    90:  "EIDRM",
    91:  "ENOMSG",
    92:  "EILSEQ",
    93:  "ENOATTR",
    94:  "EBADMSG",
    95:  "EMULTIHOP",
    96:  "ENODATA",
    97:  "ENOLINK",
    98:  "ENOSR",
    99:  "ENOSTR",
    100: "EPROTO",
    101: "ETIME",
    102: "EOPNOTSUPP",
  ]
  
  let descriptions: [ErrNo: String] = [
    0:   "Error 0",
    1:   "Operation not permitted",
    2:   "No such file or directory",
    3:   "No such process",
    4:   "Interrupted function call",
    5:   "Input/output error",
    6:   "No such device or address",
    7:   "Arg list too long",
    8:   "Exec format error",
    9:   "Bad file descriptor",
    10:  "No child processes",
    11:  "Resource deadlock avoided",
    12:  "Cannot allocate memory",
    13:  "Permission denied",
    14:  "Bad address",
    15:  "Not a block device",
    16:  "Resource busy",
    17:  "File exists",
    18:  "Improper link",
    19:  "Operation not supported by device",
    20:  "Not a directory",
    21:  "Is a directory",
    22:  "Invalid argument",
    23:  "Too many open files in system",
    24:  "Too many open files",
    25:  "Inappropriate ioctl for device",
    26:  "Text file busy",
    27:  "File too large",
    28:  "Device out of space",
    29:  "Illegal seek",
    30:  "Read-only file system",
    31:  "Too many links",
    32:  "Broken pipe",
    33:  "Numerical argument out of domain",
    34:  "Numerical result out of range",
    35:  "Resource temporarily unavailable",
    36:  "Operation now in progress",
    37:  "Operation already in progress",
    38:  "Socket operation on non-socket",
    39:  "Destination address required",
    40:  "Message too long",
    41:  "Protocol wrong type for socket",
    42:  "Protocol not available",
    43:  "Protocol not supported",
    44:  "Socket type not supported",
    45:  "Not supported",
    46:  "Protocol family not supported",
    47:  "Address family not supported by protocol family",
    48:  "Address already in use",
    49:  "Cannot assign requested address",
    50:  "Network is down",
    51:  "Network is unreachable",
    52:  "Network dropped connection on reset",
    53:  "Software caused connection abort",
    54:  "Connection reset by peer",
    55:  "No buffer space available",
    56:  "Socket is already connected",
    57:  "Socket is not connected",
    58:  "Cannot send after socket shutdown",
    60:  "Operation timed out",
    61:  "Connection refused",
    62:  "Too many levels of symbolic links",
    63:  "File name too long",
    64:  "Host is down",
    65:  "No route to host",
    66:  "Directory not empty",
    67:  "Too many processes",
    68:  "Too many users",
    69:  "Disc quota exceeded",
    70:  "Stale NFS file handle",
    72:  "RPC struct is bad",
    73:  "RPC version wrong",
    74:  "RPC prog",
    75:  "Program version wrong",
    76:  "Bad procedure for program",
    77:  "No locks available",
    78:  "Function not implemented",
    79:  "Inappropriate file type or format",
    80:  "Authentication error",
    81:  "Need authenticator",
    82:  "Device power is off",
    83:  "Device error",
    84:  "Value too large to be stored in data type",
    85:  "Bad executable (or shared library)",
    86:  "Bad CPU type in executable",
    87:  "Shared library version mismatch",
    88:  "Malformed Mach-o file",
    89:  "Operation canceled",
    90:  "Identifier removed",
    91:  "No message of desired type",
    92:  "Illegal byte sequence",
    93:  "Attribute not found",
    94:  "Bad message",
    95:  "Reserved",
    96:  "No message available",
    97:  "Reserved",
    98:  "No STREAM resources",
    99:  "Not a STREAM",
    100: "Protocol error",
    101: "STREAM ioctl() timeout",
    102: "Operation not supported on socket",
  ]
  
  // MARK: - Formatter
  
  var formatted: String {
    let errNo = ErrNo(integer)
    
    var formattedError: String = "[\(errNo): Undefined error]"
    
    var key = keys[errNo] ?? ""
    if !key.isEmpty {
      key = "(\(key))"
    }
    
    if let description = descriptions[errNo] {
      formattedError = "[\(errNo) \(key): \(description)]"
    }
    
    return formattedError
  }
  
}
